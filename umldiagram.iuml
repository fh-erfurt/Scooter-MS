@startuml





skinparam componentStyle uml2



class Scooter {
    .. Constructor ..
      (id ,position ,registeredarea ,licenseplate, status, battery, registeredmaintenancedepartment)

    .. Getter ..
  + getId() : int
  + getState() : Status
  + getBatteryInfo() : int
  + getPosition() : Coordinate
  + getRegisteredArea() : A
  + getNumberOfScooters() : int
  + getLicensePlate() : String
  + getRegisteredMaintenanceDepartment() : MaintenanceDepartment


  .. Setter ..
  + setState(status)
  + setBattery(int)
  + setPosition(coordinate)
  + setLicensePlate(licensplate)
  + setLowbattery(int)
  + setRegisteredArea(area)
  + setRegisteredMaintenanceDepartment(MaintenanceDepartment)

  .. Methods ..
  + drive(Customer) : void
  + park() : void
  + charge() : void
  + requestLicensePlate() : void
  + isInRegisteredArea() : bool
  + toString() : string
  + genChars() : string
  + genRandomNumber(min, max) : int

  __ private data __
  - customer inUseByDriver
  - area registeredarea
  - coordinate position
  - int id
  - status state
  - int battery
  - string licenseplate
  - int numberofscooters
  - maintenanceDepartment registeredmaintenancedepartment
  - int lowbattery
}

class Area {
  .. Constructor ..
  (areaname, ndegree1, ndegree2, edegree1, edegree2)

  .. Getter ..
  + getAreaName() : string

  .. Setter ..

  .. Methods ..
  + isInArea(coordinate) : bool

  __ private data __
  -String areaname
  -float ndegree1
  -float ndegree2
  -float edegree1
  -float edegree2
}



class Coordinate {
  .. Constructor ..
  (ndegree, edegree)

  -float ndegree
  -float edegree
}


class Customer {
  .. Constructor ..
  (username, password)

  .. Getter ..
  + getPosition() : coordinate
  + getCreditedEuros() : float

  .. Setter ..
  + setPosition(coordinate)
  + setCreditedEuros(creditedeuros)

  .. Methods ..
  + returnNearestScooter() : Scooter
  + useScooter(Scooter) : void

  __ private data __
  -String username
  -String password
  -float creditedeuros
  -Coordinate position
}

class ScooterHunter {

  .. Methods ..
  + chargeScooter(Scooter) : void
  + inspectScooter(Scooter) : void
  + cashOut(float): void
}

class Admin {

  .. Methods ..
  + printAllScooters() : Scooter[]
  + sendScooterToMaintenance(Scooter,MaintenanceDepartment) : boolean

}


class MaintenanceDepartment {
  .. Constructor ..
(departmentname, location, scootercapacity)

  .. Getter ..
  + getLocation() : coordinate
  + getScooterCapacity() int
  + getScooterArray() : Scooter[]

  .. Methods ..
  + repairScooter(Scooter) : void
  + checkOutScooter(Scooter) : void

  __ private data __
  -String departmentname
  -Coordinate location
  -int scootercapacity
  -Scooter scooterarray[scootercapacity]
}


class ScooterHotspot {
  .. Constructor ..
(hotspotname, location, maxscootercount)

  .. Getter ..
  + getHotSpotName() : string
  + getLocation() : coordinate
  + getMaxScooterCount() : int
  + getScooterCount() : int
  .. Setter ..
  + setHotSpotName(string) : void
  + setLocation(coordinate) : void
  + setMaxScooterCount(int) : void
  + setScooterCount(int) : void

  __ private data __
  -String hotspotname
  -Coordinate location
  -int maxscootercount
  -int scootercount


}

enum Status {
  + ready
  + lowonbattery
  + inuse
  + charging
  + damaged
  + maintenance
}

Admin --|> Customer
ScooterHunter --|> Customer
Scooter - Status
Scooter -- Coordinate
Scooter -- Area
MaintenanceDepartment -- Coordinate
ScooterHotspot -- Coordinate
Customer -- Coordinate


@enduml

