@startuml





skinparam componentStyle uml2



class Scooter {
    .. Constructor ..
      (id ,position ,registeredarea ,licenseplate )
    .. Getter ..
  + getId() : int
  + getState() : status
  + getBatteryInfo() : int
  + getPosition() : coordinate
  + getRegisteredArea() : area
  + getNumberOfScooters() : int
  + getLicensePlate() : string

  .. Setter ..
  + setState(status)
  + setPosition(coordinate)
  + setRegisteredArea(area)

  .. Methods ..
  + drive() : void
  + charge() : void

  __ private data __
  -int id
  -status state
  -int battery
  -coordinate position
  -area registeredarea
  -int numberofscooter
  -string licenseplate
}

class Area {
  .. Constructor ..
  (areaname, 4*float)

  .. Getter ..
  + getAreaInfo() : string

  .. Setter ..
  + setAreaCoordinates(4*float)

  .. Methods ..
  + isInArea(coordinate) : bool

  __ private data __
  -string areaname
  -float ndegree1
  -float ndegree2
  -float edegree1
  -float edegree2
}



class Coordinate {
  .. Constructor ..
  (ndegree, edegree)

  -float ndegree
  -float edegree
}


class Customer {
  .. Constructor ..
  (username, password)

  .. Getter ..
  + getPosition() : coordinate
  + getCreditedEuros() : float

  .. Setter ..
  + setPosition(coordinate)
  + setCreditedEuros(creditedeuros)


  .. Methods ..
  + returnNearestScooter() : Scooter

  __ private data __
  -string username
  -string password
  -float creditedeuros
  -coordinate position
}

class ScooterHunter {

  .. Methods ..
  + chargeScooter(Scooter) : void
  + inspectScooter(Scooter) : void
  + cashOut(float): void


}

class ScooterHotspot {
  .. Constructor ..
(hotspotname, location, maxscootercount)
  .. Getter ..
   + getHotSpotName() : string
   + getLocation() : coordinate
   + getMaxScooterCount() : int
   + getScooterCount() : int
  .. Setter ..
   + setHotSpotName(string) : void
   + setLocation(coordinate) : void
   + setMaxScooterCount(int) : void
   + setScooterCount(int) : void
  .. Methods ..

  __ private data __
  -string hotspotname
  -coordinate location
  -int maxscootercount
  -int scootercount


}

enum Status {
  + ready
  + lowonbattery
  + inuse
  + charging
  + damaged
  + maintenance
}

ScooterHunter --|> Customer
Scooter -- Status
Scooter -- Coordinate
Scooter -- Area
ScooterHotspot -- Coordinate
Customer -- Coordinate


@enduml