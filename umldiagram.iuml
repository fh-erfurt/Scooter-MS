@startuml





skinparam componentStyle uml2



class Scooter {
    .. Getter ..
  + getId() : int
  + getState() : status
  + getBatteryInfo() : int
  + getPosition() : coordinate
  + getRegisteredArea() : area
  + getNumberOfScooters() : int
  + getLicensePlate() : string

  .. Setter ..
  + setState(status)
  + setPosition(coordinate)
  + setRegisteredArea(area)

  .. Methods ..
  + drive() : void
  + charge() : void

  __ private data __
  -int id
  -status state
  -int battery
  -coordinate position
  -area registeredarea
  -string licenseplate
}

class Area {
  .. Constructor ..
  (areaname, 4*float)

  .. Getter ..
  + getAreaInfo() : string

  .. Setter ..
  + setAreaCoordinates(4*float)

  .. Methods ..
  + isInArea(coordinate) : bool

  __ private data __
  -string areaname
  -float ndegree1
  -float ndegree2
  -float edegree1
  -float edegree2
}



class Coordinate {
  .. Constructor ..
  (ndegree, edegree)

  -float ndegree
  -float edegree
}


class Customer {
  .. Constructor ..
  (username, password)

  .. Getter ..
  + getPosition() : coordinate
  + getCreditedEuros() : float

  .. Setter ..
  + setPosition(coordinate)
  + setCreditedEuros(creditedeuros)


  .. Methods ..
  + returnNearestScooter() : Scooter

  __ private data __
  -string username
  -string password
  -float creditedeuros
  -coordinate position
}

class ScooterHunter {
  .. Constructor ..
    (username, password)

  .. Getter ..
  + getCreditedEuros() : float
  + getPosition() : coordinate

  .. Setter ..
  + setCreditedEuros(creditedeuros)
  + setPosition(coordinate)


  .. Methods ..
  + returnNearestScooter() : Scooter
  + chargeScooter(Scooter) : void
  + inspectScooter(Scooter) : void
  + cashOut(float): void

  __ private data __
  -string username
  -string password
  -float creditedeuros
  -coordinate position

}



enum Status {
  + ready
  + inuse
  + charging
  + damaged
  + maintenance
}







@enduml